import streamlit as st
import requests
import uuid
import json
import time
from typing import Dict, List
import pandas as pd
import base64
from PIL import Image
import io
import os

# URL base de tu API (ajusta seg칰n tu configuraci칩n)
API_BASE_URL = "http://localhost:8000"

# Configuraci칩n de la p치gina
st.set_page_config(
    page_title='JosAI',
    page_icon='游뱄',
    layout="wide",
    initial_sidebar_state='expanded',
    menu_items={
        'Get Help': 'https://www.etsisi.upm.es',
        'About': 'This is a chatbot that helps you with the subjects of the ETSISI'
    }
)

# CSS personalizado para sobrescribir el color de texto resaltado
st.markdown("""
<style>
/* Sobrescribir el color de fondo de c칩digo inline y texto resaltado */
code {
    background-color: #E8E8E8 !important;
    color: #333333 !important;
    padding: 2px 4px;
    border-radius: 3px;
}

/* Sobrescribir elementos con background secundario problem치tico */
.stMarkdown code {
    background-color: #F0F0F0 !important;
    color: #2C2C2C !important;
}

/* Mantener el sidebar con tu color azul */
.css-1d391kg {
    background-color: #1B72BF !important;
}

/* Asegurar que el texto del sidebar sea legible */
.css-1d391kg .stMarkdown {
    color: white !important;
}
</style>
""", unsafe_allow_html=True)

# Funci칩n para convertir imagen a base64
def get_image_base64(image_path):
    if not os.path.isfile(image_path):
        return None
    
    img = Image.open(image_path)
    buffered = io.BytesIO()
    img.save(buffered, format="PNG")
    return base64.b64encode(buffered.getvalue()).decode()

# Rutas a tus im치genes de avatar
ai_avatar_path = "assets/ai_icon.png"
user_avatar_path = "assets/user_icon.png"

# Convertir im치genes a formato base64
ai_avatar_base64 = get_image_base64(ai_avatar_path)
user_avatar_base64 = get_image_base64(user_avatar_path)

# Crear las URLs de datos
ai_avatar = f"data:image/png;base64,{ai_avatar_base64}" if ai_avatar_base64 else None
user_avatar = f"data:image/png;base64,{user_avatar_base64}" if user_avatar_base64 else None


# Funci칩n para cargar una gu칤a docente
def upload_teaching_guide(file):
    if file is None:
        return False, "No se ha seleccionado ning칰n archivo"
    
    # Crear un formulario de datos con el archivo
    files = {"guide": (file.name, file.getvalue(), "application/pdf")}
    
    try:
        response = requests.post(f"{API_BASE_URL}/upload-teaching-guide/", files=files)
        response.raise_for_status()  # Lanzar excepci칩n si la respuesta indica error
        return True, response.json()
    except requests.HTTPError as e:
        if e.response.status_code == 400:
            return False, e.response.json().get("detail", "Error en la solicitud")
        else:
            return False, f"Error en el servidor: {str(e)}"
    except Exception as e:
        return False, f"Error inesperado: {str(e)}"

# Funci칩n para obtener todas las gu칤as docentes disponibles
def get_all_teaching_guides():
    try:
        response = requests.get(f"{API_BASE_URL}/teaching-guides/")
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"Error al obtener las gu칤as docentes: {str(e)}")
        return []

# Funci칩n para manejar la subida de preguntas frecuentes
def upload_faq(file, subject_id):
    if file is None:
        return False, "No se ha seleccionado ning칰n archivo"
    
    # Crear un formulario de datos con el archivo
    files = {"faq": (file.name, file.getvalue(), "application/pdf")}
    
    try:
        response = requests.post(f"{API_BASE_URL}/upload-faq/{subject_id}", files=files)
        response.raise_for_status()
        return True, response.json()
    except requests.HTTPError as e:
        if e.response.status_code == 400:
            return False, e.response.json().get("detail", "Error en la solicitud")
        else:
            return False, f"Error en el servidor: {str(e)}"
    except Exception as e:
        return False, f"Error inesperado: {str(e)}"

# Funci칩n para enviar un mensaje al chat
def send_chat_message(subject_id, user_query, thread_id=None):
    try:
        payload = {
            "subject_id": subject_id,
            "user_query": user_query
        }
        
        if thread_id:
            payload["thread_id"] = thread_id
            
        response = requests.post(f"{API_BASE_URL}/chat/", json=payload)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"Error al enviar mensaje: {str(e)}")
        return None

# Inicializar variables de estado en session_state
if 'messages' not in st.session_state:
    st.session_state.messages = []
if 'thread_id' not in st.session_state:
    st.session_state.thread_id = None
if 'selected_guide' not in st.session_state:
    st.session_state.selected_guide = None
if 'guides' not in st.session_state:
    # Intentar cargar las gu칤as docentes al inicio
    st.session_state.guides = get_all_teaching_guides()

# T칤tulo principal
st.title("游뱄 JosAI - Asistente de Informaci칩n sobre las asignaturas de la ETSISI")

# Sidebar para subir gu칤as y seleccionarlas
with st.sidebar:
    st.header("Gu칤as Docentes")
    
    # Bot칩n para subir nueva gu칤a
    st.subheader("Subir nueva gu칤a docente")
    uploaded_file = st.file_uploader("Selecciona un archivo PDF", type="pdf")
    
    if st.button("Procesar Gu칤a"):
        if uploaded_file:
            with st.spinner("Procesando gu칤a docente..."):
                success, result = upload_teaching_guide(uploaded_file)
                if success:
                    st.success(f"Gu칤a docente procesada correctamente: {result['guia_docente']}")
                    # Actualizar la lista de gu칤as
                    st.session_state.guides = get_all_teaching_guides()
                    # Seleccionar autom치ticamente la gu칤a reci칠n subida
                    st.session_state.selected_guide = result['id']
                    # Reiniciar el chat
                    st.session_state.messages = []
                    st.session_state.thread_id = None
                    st.rerun()
                else:
                    st.error(f"Error: {result}")
        else:
            st.warning("Por favor, selecciona un archivo PDF primero")
    
    # Dropdown para seleccionar gu칤a
    st.subheader("Seleccionar gu칤a docente")
    
    # Crear un diccionario subject_id -> nombre para el dropdown
    guide_options = {}
    if st.session_state.guides:
        for guide in st.session_state.guides:
            guide_options[guide['id']] = guide['name']
    
    # Si hay gu칤as disponibles, mostrar el dropdown
    if guide_options:
        selected_id = st.selectbox(
            "Elige una gu칤a docente",
            options=list(guide_options.keys()),
            format_func=lambda x: guide_options[x],
            key="guide_selector"
        )
        
        # Si se selecciona una gu칤a diferente, reiniciar el chat
        if selected_id != st.session_state.selected_guide:
            st.session_state.selected_guide = selected_id
            st.session_state.messages = []
            st.session_state.thread_id = None
            st.rerun()
            
            
        # Mostrar secci칩n de subida de preguntas frecuentes
        if st.session_state.selected_guide:
            st.markdown("---")
            st.subheader("Preguntas Frecuentes")
            uploaded_faq = st.file_uploader("Selecciona un archivo PDF con preguntas frecuentes", type="pdf", key="faq_uploader")
            
            if st.button("Procesar Preguntas Frecuentes"):
                if uploaded_faq:
                    with st.spinner("Procesando preguntas frecuentes..."):
                        success, result = upload_faq(uploaded_faq, st.session_state.selected_guide)
                        if success:
                            st.success("Preguntas frecuentes procesadas correctamente")
                        else:
                            st.error(f"Error: {result}")
                else:
                    st.warning("Por favor, selecciona un archivo PDF primero")
        
    else:
        st.info("No hay gu칤as docentes disponibles. Sube una para comenzar.")
    
        
    st.markdown("<br><br><br>", unsafe_allow_html=True)
    
    logo_path = "assets/logo_etsisi.png"
    st.image(logo_path, width=150, use_container_width=False)

# 츼rea principal de chat
if st.session_state.selected_guide:
    # Mostrar el nombre de la gu칤a seleccionada
    subject_name = guide_options.get(st.session_state.selected_guide, "Gu칤a seleccionada")
    st.subheader(f"Chat sobre: **{subject_name.capitalize()}**")
    
    # Mostrar mensajes anteriores
    for message in st.session_state.messages:
        avatar = ai_avatar if message["role"] == "assistant" else user_avatar
        with st.chat_message(message["role"], avatar=avatar):
            st.markdown(message["content"])
    
    # Input para nuevo mensaje
    if prompt := st.chat_input("Escribe tu pregunta sobre la gu칤a docente..."):
        # Mostrar el mensaje del usuario
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user", avatar=user_avatar):
            st.markdown(prompt)
        
        # Enviar mensaje al backend y mostrar respuesta
        with st.chat_message("assistant", avatar=ai_avatar):
            with st.spinner("Pensando..."):
                response_data = send_chat_message(
                    st.session_state.selected_guide, 
                    prompt, 
                    st.session_state.thread_id
                )
                
                if response_data:
                    # Guardar el thread_id para futuros mensajes
                    st.session_state.thread_id = response_data["thread_id"]
                    
                    # Mostrar la respuesta
                    st.markdown(response_data["response"])
                    
                    # A침adir al historial
                    st.session_state.messages.append({"role": "assistant", "content": response_data["response"]})
                else:
                    st.error("No se pudo obtener una respuesta. Por favor, intenta de nuevo.")
else:
    # Si no hay gu칤a seleccionada
    st.info("Selecciona una gu칤a docente en el panel lateral para comenzar a chatear.")
    